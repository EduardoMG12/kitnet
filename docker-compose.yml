services:
  backend:
    build: ./backend
    ports:
      - "8081:8081"
      - "5005:5005"
    environment:
      SPRING_DEVTOOLS_RESTART_TRIGGER_FILE: /app/restarts/trigger
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true
      SPRING_DEVTOOLS_RESTART_POLL_INTERVAL: 1000
      SPRING_DEVTOOLS_RESTART_QUIET_PERIOD: 500 
    volumes:
      - ./backend/build/classes:/app/build/classes 
      - ./backend/build/resources:/app/build/resources 
      - ./backend/src/main/resources/kitnetapi-firebase-adminsdk-fbsvc-f31bd8bec4.json:/app/src/main/resources/kitnetapi-firebase-adminsdk-fbsvc-f31bd8bec4.json
      - ./.env:/app/.env
      - ./backend/build/libs:/app/build/libs
    command: ["java", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005", "-jar", "/app/app.jar", "--spring.profiles.active=dev"]
    depends_on:
      - db
      - cdn_temp
    restart: on-failure
  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USERNAME: ${DATABASE_USERNAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    command: --default-authentication-plugin=caching_sha2_password
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  cdn_temp:
    build: ./cdn-temp
    ports:
     - "${CDN_TEMP_PORT}:80"
    volumes:
      - ./cdn-temp/files:/usr/share/nginx/html
    restart: on-failure

  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_BACKEND_API_URL: http://backend:8081/api
      NEXT_PUBLIC_CDN_TEMP_URL: http://cdn_temp:80
      NODE_ENV: development
    depends_on:
      - backend
      - cdn_temp
    command: ["node_modules/.bin/next", "dev", "-p", "3000"]

volumes:
  db_data:
  cdn_files: